import { CodeData } from "../../01_2_Sequence_ðŸ“˜ðŸŒŠ/0_source/source-code";

/** ************************************        ---------------------------
 * Module represents a Program, as....
 * 
 **/
(()=>{                               return {          
    hypothetical_Idea: [
    "â•­â”‰â”‰â”‰â”‰â”‰â”‰â”‰â”‰â”‰â”‰â”‰â”‰â”‰â”…â”…â”‰â”‰â”‰â”‰â”‰â”‰â”‰â”‰â”‰â”‰â”‰â”‰â•®"     +
    "â”Š                           â”Š"     +  
    "â”Š This is     **typically** â”Š" +
    "| â–ˆâ–ˆâ–ˆâ–ˆ          a file,     â”Š" +
    "|      and      â–ˆ â–ˆâ–ˆâ–ˆâ–ˆ      |" +
    "|                           |" + 
    "â”Š      could be a directory.|" +
    "â”Š               â–ˆ â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ |" +
    "â”Š                           â”Š"     +
    "â•°â”‰â”‰â”‰â”‰â”‰â”‰â”‰â”‰â”‰â”‰â”‰â”‰â”…â”…â”‰â”‰â”‰â”‰â”‰â”‰â”‰â”‰â”‰â”‰â”‰â”‰â”‰â•¯",
    {           however:   {
                "depending": [
                    ['on', "module-structure.ts: ModuleTopology"],
                    ['Module can represent', 
                            ['a folder of files,', 
                               'functioning as', 
                               ['one',('volumetric text')  ]
                            ]                     
                    ]
                ]
            }
        }
    ]
};                                  })();
 
export class Module<ModuleTopology extends CodeData> {
    Name: string;
    Code: ModuleTopology;
    Dependencies: string[];
}